// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way(in = load, sel = address[3..5], a = ram1, b = ram2, c = ram3, d = ram4, e = ram5, f = ram6, g = ram7, h = ram8);
	RAM8(in = in, load = ram1, address = address[0..2], out = ram1w);
	RAM8(in = in, load = ram2, address = address[0..2], out = ram2w);
	RAM8(in = in, load = ram3, address = address[0..2], out = ram3w);
	RAM8(in = in, load = ram4, address = address[0..2], out = ram4w);
	RAM8(in = in, load = ram5, address = address[0..2], out = ram5w);
	RAM8(in = in, load = ram6, address = address[0..2], out = ram6w);
	RAM8(in = in, load = ram7, address = address[0..2], out = ram7w);
	RAM8(in = in, load = ram8, address = address[0..2], out = ram8w);
	Mux8Way16(a = ram1w, b = ram2w, c = ram3w, d = ram4w, e = ram5w, f = ram6w, g = ram7w, h = ram8w, sel = address[3..5], out = out);
}